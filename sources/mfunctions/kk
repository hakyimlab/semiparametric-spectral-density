function y=cordist(loc1,loc2)
%% calculates cord distance bw two sets of points given lon and lat
%% loc=[lon;lat], dist is in km

R = 6378.388;
if nargin==1
    loc2 = loc1;
end
coslat1 = cos((loc1(:, 2) * pi)/180);
sinlat1 = sin((loc1(:, 2) * pi)/180);
coslon1 = cos((loc1(:, 1) * pi)/180);
sinlon1 = sin((loc1(:, 1) * pi)/180);
coslat2 = cos((loc2(:, 2) * pi)/180);
sinlat2 = sin((loc2(:, 2) * pi)/180);
coslon2 = cos((loc2(:, 1) * pi)/180);
sinlon2 = sin((loc2(:, 1) * pi)/180);

pp = [coslat1 .* coslon1, coslat1 .* sinlon1, sinlat1] * ...
     [coslat2 .* coslon2, coslat2 .* sinlon2, sinlat2]';
pp(pp>1)=1;

y = R * sqrt( 2* ( 1 - pp ) );function y=fmatern(x,irange,smoo)
%% calculates the matern spectral density 1/(a^2+w^2)^(nu+1/2)
    d=2;
    y = gamma(smoo+d/2)/gamma(smoo) * irange^(2*smoo) / pi^(d/2) ...
        ./ (irange^2 + x.^2 ).^(smoo+d/2);
function y = gausslikeli(data,cova,mu)
%------------------------------------
% gausslikeli(data,cova,mu)
% computes gaussian likelihood 
if nargin<3
    mu=0;
end
cc=chol(cova); invcc=inv(cc); %improve speed by using cc is upper triangular
%% in matlab inverse of sparse(cc) is not faster than inv of cc (tested for n=100, 1000)
xx=invcc'*(data-mu);
y = - sum(log(diag(cc))) - xx'*xx/2;
function res=gaussreml(data,cova,M)
% gaussreml(data,cova,M){
% computes gaussian restrited likelihood
% cova=covariance matrix; M = model matrix = [f(x_1) ...f(x_n)]'
    % some reshaping on input
    n = length(data);data=reshape(data,n,1);
    % 
    cc=chol(cova);invcc=inv(cc);
    invcova = invcc * invcc';
    W = M' * invcova * M;
    ww = chol(W); invww=inv(ww);
    invW = invww * invww';
    %                                                                            
    res = - sum(log(diag(cc))) - sum(log(diag(ww))) - ...
      .5 * data' * invcova * ...
    (eye(n) - M * invW * M' * invcova) * data;



function y = matern(u,range,smoo)
%------------------------------------
% matern function 
urange = u/range;
y=ones(size(u));
unonzero=find(u);
y(unonzero) = (urange(unonzero).^smoo) .* besselk(smoo,urange(unonzero))/ ...
        (2^(smoo - 1))/ gamma(smoo);
%------------------------------------
